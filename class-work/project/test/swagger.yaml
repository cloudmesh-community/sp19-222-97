swagger: "2.0"
info:
  version: "1.0.0-e"
  description: "Analyzes Tetris games and extracts meaningful relationship data"
  termsOfService: "http://swagger.io.terms/"
  contact:
    name: "Tetris Score Analyzer"
    email: "zwlevy@iu.edu"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0"
host: "localhost:8080"
basePath: "/rest"
schemes:
  - "http"
consumes:
  - "application/json"
produces:
  - "application/json"
paths:
  /users/{player}:
    get:
      operationId: app.get
      summary: Read the list to see if the user is in the list.
      parameters:
        - name: player
          in: query
          type: string
          descrption: The name of the user to be searched for.
          required: True
      responses:
        200:
          description: User found.
          schema:
            type: array
            items:
              properties:
                player:
                  type: string
                score:
                  type: integer
                level:
                  type: integer
                 playtime:
                   type: integer
        404:
          description: User not found.

    post:
      operationId: app.post
      summary: Adds the player to the list if they aren't on it yet.
      parameters:
        - name: player
          in: query # Is this right?
          type: string
          description: Player name to add to the list
          required: True
        - name: score
          in: query
          type: integer
          description: Player score to add to the list
          required: True
        - name: score
          in: query
          type: integer
          descrption: Player level to add to the list
          required: True
        - name: playtime
          in: query
          type: integer
          description: Player playtime to add to the list
          required: True
          responses:
            201:
              description: Successfully added player.
              schema:
                type: array
                items:
                  properties:
                    player:
                      type: string
                    score:
                      type: integer
                    level:
                      type: integer
                    playtime:
                      type: integer
            400:
              descrption: User could not be added.

    put:
      operationId: app.put
      summary: Updates the list of users, either fixing an old one or adding a new one
      parameters:
        - name: player
          in: query # Is this right?
          type: string
          description: Player name to add to the list
          required: True
        - name: score
          in: query
          type: integer
          description: Player score to add to the list
          required: True
        - name: score
          in: query
          type: integer
          descrption: Player level to add to the list
          required: True
        - name: playtime
          in: query
          type: integer
          description: Player playtime to add to the list
          required: True
          responses:
            200:
              description: Successfully updated player
            400:
              description: Failed to update player

    delete:
      operation: app.py
      summary: Deletes a user from the list
      parameters:
        - name: name
          in: path
          type: string
          required: True
      responses:
        200:
          description: Successfully deleted user from list
        404:
          description: User not found, could not delete
